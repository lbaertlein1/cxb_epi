renv::activate()
sessionInfo()
install.packages("installr")
library(installr)
updateR()
system()
R.Version()
library(httr)
library(jsonlite)
#for reading and writing data
library(readr) # to read CSV data
library(openxlsx) # to write to excel file
library(getPass)
####----set global variables ----------
kobo_server_url<-"https://kobo.msf.org/"
kc_server_url<-"https://ee.msf.org/x/0lLkuhmc"
kc_server_url <- "https://kobo.msf.org/"
form_id<-20211012 #change the id to your form's id
url<-paste0(kc_server_url,"api/v1/data/",form_id,".csv")
#returns the CSV content of the form
#supply url for the data
#if form data is not accessible publicly, then username and password needs to be provided.
#Use the following code to download the data.
u<- getPass("username")
pw<-getPass("password")
rawdata<-GET(url,authenticate(u,pw),progress())
library(httr)
library(jsonlite)
#for reading and writing data
library(readr) # to read CSV data
library(openxlsx) # to write to excel file
library(getPass)
####----set global variables ----------
kobo_server_url<-"https://kobo.msf.org/"
kc_server_url<-"https://ee.msf.org/x/0lLkuhmc"
kc_server_url <- "https://kobo.msf.org/"
form_id<-20211012 #change the id to your form's id
url<-paste0(kc_server_url,"api/v1/data/",form_id,".csv")
#if form data is not accessible publicly, then username and password needs to be provided.
#Use the following code to download the data.
u<- getPass("username")
url <- "https://godata-r4.who.int/"                   # <--------------------- insert instance url here, don't forget the slash at end !
username <- "balukhali-epidem@oca.msf.org"                           # <--------------------- insert your username for signing into Go.Data webapp here
password <- "bkl3p1d3m@ktp"                           # <--------------------- insert your password for signing into Go.Data webapp here
outbreak_id <- "9116fb0c-2b2e-424f-9252-accaf574e785"   # <--------------- insert your outbreak ID here! (find it in URL when you have selected outbreak)
url_request <- paste0(url,"api/oauth/token?access_token=123")
response <- POST(url=url_request,
body = list(
username = username,
password = password),
encode = "json")
pacman::p_load(httr)
response <- POST(url=url_request,
body = list(
username = username,
password = password),
encode = "json")
content <-
content(response, as = "text") %>%
fromJSON(flatten = TRUE) %>%
glimpse()
pacman::p_load(tidyverse)
content <-
content(response, as = "text") %>%
fromJSON(flatten = TRUE) %>%
glimpse()
pacman::p_load(jsonlite)
content <-
content(response, as = "text") %>%
fromJSON(flatten = TRUE) %>%
glimpse()
access_token <- content$access_token                 ## this is your access token !!! that allows API calls
# import contact follow-ups (could filter last 21 days only to avoid system time-out)
response_followups <- GET(paste0(
url,
"api/outbreaks/",
outbreak_id,
"/follow-ups"
# /?filter={%22where%22:{%22and%22:[{%22date%22:{%22between%22:[%22",
# date_21d_ago,
# "%22,%22",
# date_now,
# "%22]}}]}}"
),
add_headers(Authorization = paste("Bearer", access_token, sep = " ")))
# import outbreak Cases
response_cases <- GET(paste0(url,"api/outbreaks/",outbreak_id,"/cases"),
add_headers(Authorization = paste("Bearer", access_token, sep = " "))
)
json_cases <- content(response_cases, as = "text")
cases <- as_tibble(fromJSON(json_cases, flatten = TRUE))
View(cases)
View(cases[[58]][[1]])
temp <- cases[[58]] %>% unnest()
temp <- cases[[58]]
View(temp)
#Cases
if (nrow(cases)==0) {
cols.cases <- c("firstName","gender","isDateOfOnsetApproximate","wasContact","outcomeId","safeBurial","classification","riskLevel","riskReason","transferRefused","vaccinesReceived","pregnancyStatus","id","outbreakId","visualId","lastName","dob","occupation","documents","dateOfReporting","isDateOfReportingApproximate","dateOfLastContact","dateOfInfection","dateOfOnset","dateBecomeCase","classificationHistory","dateOfOutcome","hasRelationships","relationshipsRepresentation","usualPlaceOfResidenceLocationId","createdAt","createdBy","updatedAt","updatedBy","deleted","middleName","notDuplicatesIds","wasCase","active","followUpHistory","age.years","age.months","followUp.originalStartDate","followUp.startDate","followUp.endDate","followUp.status")
cases <- data.frame(matrix(ncol=length(cols.cases)))
colnames(cases) <- cols.cases
cols.cases_addresses <- c("typeId","country","city","addressLine1","postalCode","locationId","geoLocationAccurate","date","phoneNumber","emailAddress","geoLocation.lat","geoLocation.lng")
cases_address_history <- data.frame(matrix(ncol=length(cols.cases_addresses)))
colnames(cases_address_history) <- cols.cases_addresses
cases <- cases %>% bind_cols(cases_address_history) %>% nest(addresses=cols.cases_addresses)
cols.cases_hosp <- c("typeId","centerName","locationId","comments","startDate","endDate")
cases_hosp <- data.frame(matrix(ncol=length(cols.cases_hosp)))
colnames(cases_hosp) <- cols.cases_hosp
cases <- cases %>% bind_cols(cases_hosp) %>% nest(dateRanges=cols.cases_hosp)
}
View(cases)
response_users <- GET(paste0(url,"api/users"),
add_headers(Authorization = paste("Bearer", access_token, sep = " "))
)
json_users <- content(response_users, as = "text")
users <- as_tibble(fromJSON(json_users, flatten = TRUE))
View(users)
View(cases[[58]][[55]])
temp <- cases %>% select(questionnaireAnsweres$questionnaireAnswers.agency, dateOfReporting)
temp <- cases %>% select(questionnaireAnswers.agency, dateOfReporting)
View(temp)
temp <- unnest_wider(temp, questionnaireAnswers.agency)
temp1 <- unnest_wider(temp$questionnaireAnswers.agency, questionnaireAnswers.agency)
temp1 <- temp %>%
dplyr::mutate(values = purrr::map(questionnaireAnswers.agency, setNames, c("V1","V2"))) %>%
unnest_wider(values)
temp1 <- temp %>%
dplyr::mutate(values = purrr::map(questionnaireAnswers.agency, setNames, c("V1"))) %>%
unnest_wider(values)
table(temp$questionnaireAnswers.agency)
table(is.null(temp$questionnaireAnswers.agency))
temp1 <- temp %>% filter(!is.null(questionnaireAnswers.agency))
View(temp1)
temp$new_column <- sapply(temp[[1]], \(x) x[[1]]$value)
temp$agency <- sapply(temp$questionnaireAnswers.agency,"[[",1)
temp$questionnaireAnswers.agency[[1]]
temp$questionnaireAnswers.agency[[2]]
temp$questionnaireAnswers.agency[[200]]
temp$questionnaireAnswers.agency[[205]]
temp$questionnaireAnswers.agency[[2000]]
temp <- temp %>% mutate(agency = questionnaireAnswers.agency[[row_number()]])
agency <- temp$questionnaireAnswers.agency[[row_number()]])
agency <- temp$questionnaireAnswers.agency[[row_number()]]
lapply(temp$questionnaireAnswers.agency, `[[`, 1)
unlist(temp$questionnaireAnswers.agency)[ c(TRUE,FALSE) ]
agency <- unlist(temp$questionnaireAnswers.agency)[ c(TRUE,FALSE) ]
table(agency)
View(cases)
table(agency, exclude=NULL)
table(cases$agency)
cases <- cases %>% mutate(agency = substr(visualId, 1, 6))
table(cases$visualId)
table(cases$agency)
